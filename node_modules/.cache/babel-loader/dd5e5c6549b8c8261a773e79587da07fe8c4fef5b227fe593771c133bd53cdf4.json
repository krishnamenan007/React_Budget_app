{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Krishnamenan\\\\Desktop\\\\Projects\\\\React\\\\React_Budget_app\\\\src\\\\context\\\\AppContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer } from 'react';\n\n// 5. The reducer - this is used to update the state, based on the action\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppReducer = (state, action) => {\n  let budget = 0;\n  switch (action.type) {\n    case 'ADD_EXPENSE':\n      let total_budget = 0;\n      total_budget = state.expenses.reduce((previousExp, currentExp) => {\n        return previousExp + currentExp.cost;\n      }, 0);\n      total_budget = total_budget + action.payload.cost;\n      action.type = \"DONE\";\n      if (total_budget <= state.budget) {\n        total_budget = 0;\n        state.expenses.map(currentExp => {\n          if (currentExp.name === action.payload.name) {\n            currentExp.cost = action.payload.cost + currentExp.cost;\n          }\n          return currentExp;\n        });\n        return {\n          ...state\n        };\n      } else {\n        alert(\"Cannot increase the allocation! Out of funds\");\n        return {\n          ...state\n        };\n      }\n    case 'RED_EXPENSE':\n      const red_expenses = state.expenses.map(currentExp => {\n        if (currentExp.name === action.payload.name && currentExp.cost - action.payload.cost >= 0) {\n          currentExp.cost = currentExp.cost - action.payload.cost;\n          budget = state.budget + action.payload.cost;\n        }\n        return currentExp;\n      });\n      action.type = \"DONE\";\n      return {\n        ...state,\n        expenses: [...red_expenses]\n      };\n    case 'DELETE_EXPENSE':\n      action.type = \"DONE\";\n      state.expenses.map(currentExp => {\n        if (currentExp.name === action.payload) {\n          budget = state.budget + currentExp.cost;\n          currentExp.cost = 0;\n        }\n        return currentExp;\n      });\n      action.type = \"DONE\";\n      return {\n        ...state,\n        budget\n      };\n    case 'SET_BUDGET':\n      action.type = \"DONE\";\n      state.budget = action.payload;\n      return {\n        ...state\n      };\n    case 'CHG_CURRENCY':\n      action.type = \"DONE\";\n      state.currency = action.payload;\n      return {\n        ...state\n      };\n    default:\n      return state;\n  }\n};\n\n// 1. Sets the initial state when the app loads\n_c = AppReducer;\nconst initialState = {\n  budget: 2000,\n  expenses: [{\n    id: \"Marketing\",\n    name: 'Marketing',\n    cost: 50\n  }, {\n    id: \"Finance\",\n    name: 'Finance',\n    cost: 300\n  }, {\n    id: \"Sales\",\n    name: 'Sales',\n    cost: 70\n  }, {\n    id: \"Human Resource\",\n    name: 'Human Resource',\n    cost: 40\n  }, {\n    id: \"IT\",\n    name: 'IT',\n    cost: 500\n  }],\n  currency: '£'\n};\n\n// 2. Creates the context this is the thing our components import and use to get the state\nexport const AppContext = /*#__PURE__*/createContext();\n\n// 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\nexport const AppProvider = props => {\n  _s();\n  // 4. Sets up the app state. takes a reducer, and an initial state\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  let remaining = 0;\n  if (state.expenses) {\n    const totalExpenses = state.expenses.reduce((total, item) => {\n      return total = total + item.cost;\n    }, 0);\n    remaining = state.budget - totalExpenses;\n  }\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      expenses: state.expenses,\n      budget: state.budget,\n      remaining: remaining,\n      dispatch,\n      currency: state.currency\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n};\n_s(AppProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c2 = AppProvider;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppReducer\");\n$RefreshReg$(_c2, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useReducer","jsxDEV","_jsxDEV","AppReducer","state","action","budget","type","total_budget","expenses","reduce","previousExp","currentExp","cost","payload","map","name","alert","red_expenses","currency","_c","initialState","id","AppContext","AppProvider","props","_s","dispatch","remaining","totalExpenses","total","item","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/Krishnamenan/Desktop/Projects/React/React_Budget_app/src/context/AppContext.js"],"sourcesContent":["import React, { createContext, useReducer } from 'react';\r\n\r\n// 5. The reducer - this is used to update the state, based on the action\r\nexport const AppReducer = (state, action) => {\r\n    let budget = 0;\r\n    switch (action.type) {\r\n        case 'ADD_EXPENSE':\r\n            let total_budget = 0;\r\n            total_budget = state.expenses.reduce(\r\n                (previousExp, currentExp) => {\r\n                    return previousExp + currentExp.cost\r\n                },0\r\n            );\r\n            total_budget = total_budget + action.payload.cost;\r\n            action.type = \"DONE\";\r\n            if(total_budget <= state.budget) {\r\n                total_budget = 0;\r\n                state.expenses.map((currentExp)=> {\r\n                    if(currentExp.name === action.payload.name) {\r\n                        currentExp.cost = action.payload.cost + currentExp.cost;\r\n                    }\r\n                    return currentExp\r\n                });\r\n                return {\r\n                    ...state,\r\n                };\r\n            } else {\r\n                alert(\"Cannot increase the allocation! Out of funds\");\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n            case 'RED_EXPENSE':\r\n                const red_expenses = state.expenses.map((currentExp)=> {\r\n                    if (currentExp.name === action.payload.name && currentExp.cost - action.payload.cost >= 0) {\r\n                        currentExp.cost =  currentExp.cost - action.payload.cost;\r\n                        budget = state.budget + action.payload.cost\r\n                    }\r\n                    return currentExp\r\n                })\r\n                action.type = \"DONE\";\r\n                return {\r\n                    ...state,\r\n                    expenses: [...red_expenses],\r\n                };\r\n            case 'DELETE_EXPENSE':\r\n            action.type = \"DONE\";\r\n            state.expenses.map((currentExp)=> {\r\n                if (currentExp.name === action.payload) {\r\n                    budget = state.budget + currentExp.cost\r\n                    currentExp.cost =  0;\r\n                }\r\n                return currentExp\r\n            })\r\n            action.type = \"DONE\";\r\n            return {\r\n                ...state,\r\n                budget\r\n            };\r\n        case 'SET_BUDGET':\r\n            action.type = \"DONE\";\r\n            state.budget = action.payload;\r\n\r\n            return {\r\n                ...state,\r\n            };\r\n        case 'CHG_CURRENCY':\r\n            action.type = \"DONE\";\r\n            state.currency = action.payload;\r\n            return {\r\n                ...state\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// 1. Sets the initial state when the app loads\r\nconst initialState = {\r\n    budget: 2000,\r\n    expenses: [\r\n        { id: \"Marketing\", name: 'Marketing', cost: 50 },\r\n        { id: \"Finance\", name: 'Finance', cost: 300 },\r\n        { id: \"Sales\", name: 'Sales', cost: 70 },\r\n        { id: \"Human Resource\", name: 'Human Resource', cost: 40 },\r\n        { id: \"IT\", name: 'IT', cost: 500 },\r\n    ],\r\n    currency: '£'\r\n};\r\n\r\n// 2. Creates the context this is the thing our components import and use to get the state\r\nexport const AppContext = createContext();\r\n\r\n// 3. Provider component - wraps the components we want to give access to the state\r\n// Accepts the children, which are the nested(wrapped) components\r\nexport const AppProvider = (props) => {\r\n    // 4. Sets up the app state. takes a reducer, and an initial state\r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n    let remaining = 0;\r\n\r\n    if (state.expenses) {\r\n            const totalExpenses = state.expenses.reduce((total, item) => {\r\n            return (total = total + item.cost);\r\n        }, 0);\r\n        remaining = state.budget - totalExpenses;\r\n    }\r\n\r\n    return (\r\n        <AppContext.Provider\r\n            value={{\r\n                expenses: state.expenses,\r\n                budget: state.budget,\r\n                remaining: remaining,\r\n                dispatch,\r\n                currency: state.currency\r\n            }}\r\n        >\r\n            {props.children}\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}